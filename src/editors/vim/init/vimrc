" +-------+
" | vimrc |
" +-------+

set nocompatible
filetype off

let g:my_vim_dir = fnamemodify(expand('$VIM'), ':h:h')

function MyVimFile(path)
  return g:my_vim_dir.'/'.a:path
endfunction

" Runtimepath initialization

let s:plugins = []

let s:bundle_dir = '/home/nick/vim-bundle/bundle/'
let s:bundle_ignore =
  \ [ 'tabular'
  \ , 'vim-sexp'
  \ , 'vim-sexp-mappings-for-regular-people'
  \ , 'cscope_macros.vim'
  \ ]

for plugin in systemlist('ls '.s:bundle_dir)
  if index(s:bundle_ignore, plugin) < 0
    call add(s:plugins, s:bundle_dir.plugin)
  endif
endfor

let s:my_plugin_list = '/run/current-system/sw/share/vim-plugins/annoying.rtp'
if system('uname -a') =~ 'NixOS'
  let s:plugins += readfile(s:my_plugin_list)
endif

let s:plugins_after = []
for dir in s:plugins
  call add(s:plugins_after, dir.'/after')
endfor

" This order is based on :h initialization
let s:rtp = [ MyVimFile('pre') ]
        \ + s:plugins
        \ + [ expand('$VIMRUNTIME') ]
        \ + s:plugins_after
        \ + [ MyVimFile('post') ]

let &rtp = join(s:rtp, ',')

" Source actual configuration

for f in split(glob(MyVimFile('vimrc.d/lib/*')))
  exec 'source' f
endfor

for modules in split(glob(MyVimFile('vimrc.d/modules.*')))
  for module in split(glob(modules.'/*.vim'))
    exec 'source' module
  endfor
endfor

" Allow for project-specific options/mappings

if filereadable('local.vim')
  source local.vim
endif

filetype plugin indent on

