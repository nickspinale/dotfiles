#!/bin/sh
# gfzf: starts fzf in a new xterm window
# usage: gfzf [FZF OPTIONS]

function term() {
    # xy=$(xrandr | grep \* | awk '{ print $1 }')
    # x=$(echo $xy | cut -d x -f 1)
    # y=$(echo $xy | cut -d x -f 2)
    # xterm -geometry $(expr $x '/' 2)x$(expr $y '/' 2)+$(expr $x '/' 4)+$(expr $y '/' 4) "$@"
    # https://bbs.archlinux.org/viewtopic.php?id=44256
    xterm "$@"
}

set -e

# Clean up named pipes on exit
id=$RANDOM
argsf="${TMPDIR:-/tmp}/fzf-args-$id"
fifo1="${TMPDIR:-/tmp}/fzf-fifo1-$id"
fifo2="${TMPDIR:-/tmp}/fzf-fifo2-$id"
fifo3="${TMPDIR:-/tmp}/fzf-fifo3-$id"
cleanup() {
  rm -f $argsf $fifo1 $fifo2 $fifo3
}
trap cleanup EXIT SIGINT SIGTERM

fail() {
  >&2 echo "$1"
  exit 2
}

[ -n "$FZF_DEFAULT_OPTS"    ] && envs="$envs FZF_DEFAULT_OPTS=$(printf %q "$FZF_DEFAULT_OPTS")"
[ -n "$FZF_DEFAULT_COMMAND" ] && envs="$envs FZF_DEFAULT_COMMAND=$(printf %q "$FZF_DEFAULT_COMMAND")"

opts="$@"

if [ -n "$term" -o -t 0 ]; then
    echo "fzf $opts > $fifo2; echo \$? > $fifo3" > $argsf
    term -e sh -c "$envs sh $argsf"
else
    cat <&0 > $fifo1
    echo "fzf $opts < $fifo1 > $fifo2; echo \$? > $fifo3" > $argsf
    term -e sh -c "$envs sh $argsf"
fi

cat $fifo2
exit "$(cat $fifo3)"

